generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int         @id @default(autoincrement()) @map("userId")
  email     String      @unique @map("email")
  password  String      @map("password")
  createdAt DateTime    @default(now()) @map("createdAt")
  updatedAt DateTime    @updatedAt @map("updatedAt")
  role      Role        @default(user)
  character Character[]

  @@map("Users")
}

enum Role {
  user
  admin
}

model Character {
  charId        Int            @id @default(autoincrement()) @map("charId")
  userId        Int            @map("userId")
  nickName      String         @unique @map("nickName")
  health        Int            @default(500) @map("health")
  power         Int            @default(100) @map("power")
  money         Int            @default(10000) @map("money")
  createdAt     DateTime       @default(now()) @map("createdAt")
  updatedAt     DateTime       @updatedAt @map("updatedAt")
  user          Users          @relation(fields: [userId], references: [userId], onDelete: Cascade)


 CharInventory CharInventory[]
  CharItemsSet CharItemsSet[]
  @@index([userId], map: "Character_userId_fkey")
  @@map("Character")
}

model CharInventory {
  charInvenId Int       @id @default(autoincrement()) @map("charInvenId")
  charId      Int        @map("charId")
  itemId         Int?             @map("itemId")
  name           String?         @map("name")
  power          Int?           @map("power")
  health         Int?           @map("health")
  price          Int?            @map("price")
  stack          Int?            @default(0) @map("stack")
  Character          Character          @relation(fields: [charId], references: [charId], onDelete: Cascade)


  @@map("CharInventory")
}

model CharItemsSet {
  charItemsSetId Int       @id @default(autoincrement()) @map("charItemsSetId")
  charId         Int       @map("charId")
  itemId         Int?             @map("itemId")
  name           String?         @map("name")
  power          Int?            @map("power")
  health         Int?            @map("health")
  price          Int?            @map("price")
  stack          Int?            @default(0) @map("stack")
  Character          Character          @relation(fields: [charId], references: [charId], onDelete: Cascade)


  @@map("CharItemsSet")
}

model Items {
  itemId         Int            @id @default(autoincrement()) @map("itemId")
  name           String         @map("name")
  power          Int            @map("power")
  health         Int            @map("health")
  price          Int            @map("price")
  stack          Int            @default(0) @map("stack")
  
  @@map("Items")
}
